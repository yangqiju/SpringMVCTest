define([ "dojo/_base/declare", "dojo/_base/lang", "dojo/_base/xhr" ], function(
		declare, lang, xhr) {
	return declare("ModuleTreeModel", null, {
		// summary:
		// Interface from tree.json file generated by doc parser to dijit/Tree
		url : "",
		data : {},
		constructor : function(url) {
			// summary:
			// Call w/the javascript object loaded from tree.json
			this.url = url;
		},
		destroy : function() {
		},
		// =======================================================================
		// Methods for traversing hierarchy
		getRoot : function(onItem) {
			// Fetch the data. We actually don't need to do this until the first
			// getChildren() call, but might
			// as well do it now.
			xhr.get({
				url : this.url,
				handleAs : "json",
				load : function(data) {
					this.data = data;
					onItem(data);
				}
			});
		},
		mayHaveChildren : function(item) {
			return item.children && item.children.length
		},
		getChildren : function(item, onComplete) {
			onComplete(item.children);
		},
		// =======================================================================
		// Inspecting items
		isItem : function(something) {
			return true;
		},
		fetchItemByIdentity : function(keywordArgs) {
			// unimplemented, but tree still working, apparently unneeded
		},
		getIdentity : function(item) {
			return item.id;
		},
		getLabel : function(item) {
			return item.name;
		},
		// =======================================================================
		// Write interface (unsupported)
		newItem : function(args, parent, insertIndex, before) {
		},
		pasteItem : function(childItem, oldParentItem, newParentItem, bCopy,
				insertIndex, before) {
		},
		// =======================================================================
		// Callbacks (unsupported)
		onChange : function(item) {
		},
		onChildrenChange : function(parent, newChildrenList) {
		}
	});
});